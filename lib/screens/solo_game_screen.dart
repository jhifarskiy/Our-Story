import 'package:flutter/material.dart';
import '../widgets/gradient_background.dart';
import '../models/story_settings.dart';
import 'solo_story_play_screen.dart';

class SoloGameScreen extends StatefulWidget {
  const SoloGameScreen({super.key});

  @override
  State<SoloGameScreen> createState() => _SoloGameScreenState();
}

class _SoloGameScreenState extends State<SoloGameScreen> {
  final _formKey = GlobalKey<FormState>();

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π
  final _playerNameController = TextEditingController(text: '–ò–≥—Ä–æ–∫');
  final _storyPromptController = TextEditingController();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  StoryGenre _selectedGenre = StoryGenre.adventure;
  RelationshipType _relationshipType = RelationshipType.friends;
  String _selectedSetting = 'üèôÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥';
  int _storyLength = 3; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
  int _complexityLevel = 2; // 1-5

  @override
  void dispose() {
    _playerNameController.dispose();
    _storyPromptController.dispose();
    super.dispose();
  }

  Future<void> _startSoloGame() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    try {
      final settings = StorySettings(
        player1Name: _playerNameController.text.trim(),
        player2Name: '–ò–ò –ü–µ—Ä—Å–æ–Ω–∞–∂', // –ò–ò –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        genre: _selectedGenre,
        relationshipType: _relationshipType,
        setting: _selectedSetting,
        storyLength: _storyLength,
        complexityLevel: _complexityLevel,
        customPrompt: _storyPromptController.text.trim().isEmpty
            ? '–°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.'
            : _storyPromptController.text.trim(),
      );

      if (mounted) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => SoloStoryPlayScreen(settings: settings),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GradientBackground(
        child: SafeArea(
          child: Form(
            key: _formKey,
            child: CustomScrollView(
              slivers: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                SliverAppBar(
                  expandedHeight: 120,
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  flexibleSpace: FlexibleSpaceBar(
                    title: const Text(
                      '–°–æ–ª–æ –†–µ–∂–∏–º',
                      style: TextStyle(
                        color: Colors.white,
                        fontFamily: 'Cinzel',
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    centerTitle: true,
                  ),
                  leading: IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.arrow_back, color: Colors.white),
                  ),
                ),

                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                SliverPadding(
                  padding: const EdgeInsets.all(20),
                  sliver: SliverList(
                    delegate: SliverChildListDelegate([
                      // –ò–º—è –∏–≥—Ä–æ–∫–∞
                      _buildSection(
                        title: 'üë§ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂',
                        children: [
                          _buildTextField(
                            controller: _playerNameController,
                            label: '–í–∞—à–µ –∏–º—è',
                            hint: '–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–æ',
                            icon: Icons.person,
                          ),
                        ],
                      ),

                      const SizedBox(height: 24),

                      // –¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
                      _buildSection(
                        title: 'ü§ñ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏',
                        children: [_buildRelationshipSelector()],
                      ),

                      const SizedBox(height: 24),

                      // –ñ–∞–Ω—Ä –∏—Å—Ç–æ—Ä–∏–∏
                      _buildSection(
                        title: 'üé≠ –ñ–∞–Ω—Ä –∏—Å—Ç–æ—Ä–∏–∏',
                        children: [_buildGenreSelector()],
                      ),

                      const SizedBox(height: 24),

                      // –ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è
                      _buildSection(
                        title: 'üåç –ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è',
                        children: [_buildSettingSelector()],
                      ),

                      const SizedBox(height: 24),

                      // –î–ª–∏–Ω–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                      _buildSection(
                        title: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã',
                        children: [
                          _buildSlider(
                            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤',
                            value: _storyLength.toDouble(),
                            min: 1,
                            max: 10,
                            divisions: 9,
                            onChanged: (value) {
                              setState(() {
                                _storyLength = value.round();
                              });
                            },
                          ),
                          const SizedBox(height: 16),
                          _buildSlider(
                            label: '–°–ª–æ–∂–Ω–æ—Å—Ç—å —Å—é–∂–µ—Ç–∞',
                            value: _complexityLevel.toDouble(),
                            min: 1,
                            max: 5,
                            divisions: 4,
                            onChanged: (value) {
                              setState(() {
                                _complexityLevel = value.round();
                              });
                            },
                          ),
                        ],
                      ),

                      const SizedBox(height: 24),

                      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
                      _buildSection(
                        title: '‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è',
                        children: [
                          _buildTextField(
                            controller: _storyPromptController,
                            label:
                                '–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Ö–æ—Ç–∏—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                            hint:
                                '–ù–∞–ø—Ä–∏–º–µ—Ä: –° —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∏—Å—Ç–∏–∫–∏ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏...',
                            icon: Icons.edit,
                            maxLines: 3,
                            required: false,
                          ),
                        ],
                      ),

                      const SizedBox(height: 40),

                      // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: _startSoloGame,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 15),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(15),
                            ),
                            elevation: 5,
                          ),
                          child: const Text(
                            'üöÄ –ù–∞—á–∞—Ç—å –°–æ–ª–æ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'Cinzel',
                            ),
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          color: Colors.white.withOpacity(0.1),
                          border: Border.all(
                            color: Colors.white.withOpacity(0.3),
                          ),
                        ),
                        child: Column(
                          children: [
                            const Icon(
                              Icons.lightbulb_outline,
                              color: Colors.amber,
                              size: 24,
                            ),
                            const SizedBox(height: 8),
                            Text(
                              '–ò–ò —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º!',
                              style: TextStyle(
                                color: Colors.white.withOpacity(0.8),
                                fontSize: 14,
                                fontFamily: 'Cinzel',
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      ),
                    ]),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSection({
    required String title,
    required List<Widget> children,
  }) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(15),
        color: Colors.white.withOpacity(0.1),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.bold,
              fontFamily: 'Cinzel',
            ),
          ),
          const SizedBox(height: 16),
          ...children,
        ],
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    int maxLines = 1,
    bool required = true,
  }) {
    return TextFormField(
      controller: controller,
      maxLines: maxLines,
      style: const TextStyle(color: Colors.white, fontFamily: 'Cinzel'),
      decoration: InputDecoration(
        labelText: label,
        hintText: hint,
        prefixIcon: Icon(icon, color: Colors.white.withOpacity(0.7)),
        labelStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
        hintStyle: TextStyle(color: Colors.white.withOpacity(0.5)),
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.white.withOpacity(0.3)),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.white.withOpacity(0.3)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Colors.white),
        ),
      ),
      validator: required
          ? (value) {
              if (value == null || value.trim().isEmpty) {
                return '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
              }
              return null;
            }
          : null,
    );
  }

  Widget _buildRelationshipSelector() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: Colors.white.withOpacity(0.1),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: DropdownButtonHideUnderline(
        child: DropdownButton<RelationshipType>(
          value: _relationshipType,
          isExpanded: true,
          dropdownColor: Colors.grey[800],
          style: const TextStyle(color: Colors.white, fontFamily: 'Cinzel'),
          items: RelationshipType.values.map((type) {
            String label;
            String emoji;
            switch (type) {
              case RelationshipType.lovers:
                label = '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã';
                emoji = 'üíï';
                break;
              case RelationshipType.friends:
                label = '–î—Ä—É–∑—å—è';
                emoji = 'üë´';
                break;
              case RelationshipType.colleagues:
                label = '–ö–æ–ª–ª–µ–≥–∏';
                emoji = 'üëî';
                break;
              case RelationshipType.rivals:
                label = '–°–æ–ø–µ—Ä–Ω–∏–∫–∏';
                emoji = 'ü•ä';
                break;
              case RelationshipType.strangers:
                label = '–ù–µ–∑–Ω–∞–∫–æ–º—Ü—ã';
                emoji = '‚ùì';
                break;
              case RelationshipType.enemies:
                label = '–í—Ä–∞–≥–∏';
                emoji = '‚öîÔ∏è';
                break;
            }
            return DropdownMenuItem(value: type, child: Text('$emoji $label'));
          }).toList(),
          onChanged: (RelationshipType? newValue) {
            if (newValue != null) {
              setState(() {
                _relationshipType = newValue;
              });
            }
          },
        ),
      ),
    );
  }

  Widget _buildGenreSelector() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: Colors.white.withOpacity(0.1),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: DropdownButtonHideUnderline(
        child: DropdownButton<StoryGenre>(
          value: _selectedGenre,
          isExpanded: true,
          dropdownColor: Colors.grey[800],
          style: const TextStyle(color: Colors.white, fontFamily: 'Cinzel'),
          items: StoryGenre.values.map((genre) {
            String label;
            String emoji;
            switch (genre) {
              case StoryGenre.romance:
                label = '–†–æ–º–∞–Ω—Ç–∏–∫–∞';
                emoji = 'üíï';
                break;
              case StoryGenre.adventure:
                label = '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è';
                emoji = 'üó∫Ô∏è';
                break;
              case StoryGenre.mystery:
                label = '–ú–∏—Å—Ç–∏–∫–∞';
                emoji = 'üîç';
                break;
              case StoryGenre.fantasy:
                label = '–§—ç–Ω—Ç–µ–∑–∏';
                emoji = 'üßô‚Äç‚ôÄÔ∏è';
                break;
              case StoryGenre.scifi:
                label = '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞';
                emoji = 'üöÄ';
                break;
              case StoryGenre.drama:
                label = '–î—Ä–∞–º–∞';
                emoji = 'üé≠';
                break;
              case StoryGenre.comedy:
                label = '–ö–æ–º–µ–¥–∏—è';
                emoji = 'üòÑ';
                break;
              case StoryGenre.horror:
                label = '–£–∂–∞—Å—ã';
                emoji = 'üëª';
                break;
            }
            return DropdownMenuItem(value: genre, child: Text('$emoji $label'));
          }).toList(),
          onChanged: (StoryGenre? newValue) {
            if (newValue != null) {
              setState(() {
                _selectedGenre = newValue;
              });
            }
          },
        ),
      ),
    );
  }

  Widget _buildSettingSelector() {
    final settings = [
      'üèôÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥',
      'üè∞ –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π –∑–∞–º–æ–∫',
      'üå≤ –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ª–µ—Å',
      'üèñÔ∏è –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤',
      'üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
      'üèõÔ∏è –î—Ä–µ–≤–Ω–∏–π –†–∏–º',
      'üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ñ–∏—Å',
      'üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
      'üèîÔ∏è –ì–æ—Ä–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è',
      'üé™ –¶–∏—Ä–∫',
    ];

    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: Colors.white.withOpacity(0.1),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: DropdownButtonHideUnderline(
        child: DropdownButton<String>(
          value: _selectedSetting,
          isExpanded: true,
          dropdownColor: Colors.grey[800],
          style: const TextStyle(color: Colors.white, fontFamily: 'Cinzel'),
          items: settings.map((setting) {
            return DropdownMenuItem(value: setting, child: Text(setting));
          }).toList(),
          onChanged: (String? newValue) {
            if (newValue != null) {
              setState(() {
                _selectedSetting = newValue;
              });
            }
          },
        ),
      ),
    );
  }

  Widget _buildSlider({
    required String label,
    required double value,
    required double min,
    required double max,
    required int divisions,
    required ValueChanged<double> onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          '$label: ${value.round()}',
          style: const TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.w500,
            fontFamily: 'Cinzel',
          ),
        ),
        const SizedBox(height: 8),
        SliderTheme(
          data: SliderTheme.of(context).copyWith(
            activeTrackColor: Colors.white,
            inactiveTrackColor: Colors.white.withOpacity(0.3),
            thumbColor: Colors.white,
            overlayColor: Colors.white.withOpacity(0.2),
            valueIndicatorColor: Colors.white,
            valueIndicatorTextStyle: const TextStyle(
              color: Colors.black,
              fontFamily: 'Cinzel',
            ),
          ),
          child: Slider(
            value: value,
            min: min,
            max: max,
            divisions: divisions,
            label: value.round().toString(),
            onChanged: onChanged,
          ),
        ),
      ],
    );
  }
}
